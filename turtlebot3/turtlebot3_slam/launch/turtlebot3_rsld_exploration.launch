<launch>
  <!-- Arguments -->
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="configuration_basename" default="turtlebot3_lds_2d.lua"/>
  <arg name="sensor_range" default="7.0"/>
  <arg name="cmd_vel_topic" default="cmd_vel" />
  <arg name="odom_topic" default="odom" />
  <arg name="multi_robot_name" default=""/>
  <arg name="param_prefix" default="$(arg multi_robot_name)/"/>
  <arg name="resolution" default="0.1"/>

  <!-- TurtleBot3 and Gmapping -->
  <include file="$(find turtlebot3_slam)/launch/turtlebot3_rsld_gmapping.launch">
    <arg name="model" value="$(arg model)" />
    <arg name="set_base_frame" value="$(arg multi_robot_name)/base_footprint"/>
    <arg name="set_odom_frame" value="$(arg multi_robot_name)/odom"/>
    <arg name="set_map_frame"  value="$(arg multi_robot_name)/map"/>
    <arg name="resolution" value="$(arg resolution)"/>
  </include>

  <!-- AMCL -->
  <include file="$(find turtlebot3_navigation)/launch/amcl.launch"/>


  <!-- move_base -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    <rosparam ns="global_costmap" subst_value="true">
obstacle_range: 3.0
raytrace_range: 3.5
footprint: [[-0.105, -0.105], [-0.105, 0.105], [0.041, 0.105], [0.041, -0.105]]
#robot_radius: 0.105
inflation_radius: 1.0
cost_scaling_factor: 3.0
map_type: costmap
observation_sources: scan
scan: {sensor_frame: $(arg param_prefix)base_scan, data_type: LaserScan, topic: scan, marking: true, clearing: true}
     </rosparam>

     <rosparam ns="local_costmap" subst_value="true">
obstacle_range: 3.0
raytrace_range: 3.5
footprint: [[-0.105, -0.105], [-0.105, 0.105], [0.041, 0.105], [0.041, -0.105]]
#robot_radius: 0.105
inflation_radius: 1.0
cost_scaling_factor: 3.0
map_type: costmap
observation_sources: scan
scan: {sensor_frame: $(arg param_prefix)base_scan, data_type: LaserScan, topic: scan, marking: true, clearing: true}
     </rosparam>

     <rosparam subst_value="true">
local_costmap:
  global_frame: $(arg param_prefix)odom
  robot_base_frame: $(arg param_prefix)base_link #changed from /base_footprint
  update_frequency: 5.0 #changed from 10 to stop getting warning
  publish_frequency: 5.0 #changed from 10 to stop getting warning
  transform_tolerance: 0.5  
  static_map: false  
  rolling_window: true
  width: 3
  height: 3
  resolution: $(arg resolution)
     </rosparam>
    
     <rosparam subst_value="true">
global_costmap:
  global_frame: $(arg param_prefix)map
  robot_base_frame: $(arg param_prefix)base_link #changed from /base_footprint
  update_frequency: 5.0
  publish_frequency: 5.0
  transform_tolerance: 0.5
  static_map: true
     </rosparam>

    <!--Move Base Params-->
    <rosparam>
shutdown_costmaps: false
controller_frequency: 10.0
planner_patience: 5.0
controller_patience: 15.0
conservative_reset_dist: 3.0
planner_frequency: 5.0
oscillation_timeout: 10.0
oscillation_distance: 0.2
    </rosparam> 
    
    <!--DWA_Local_Planner_Params-->
    <rosparam>
DWAPlannerROS:
# Robot Configuration Parameters
  max_vel_x: 0.22
  min_vel_x: -0.22 #reduced from 0.22 so robot will face where it is moving
  max_vel_y: 0.0
  min_vel_y: 0.0
# The velocity when robot is moving in a straight line
  max_trans_vel:  0.15 #0.22
  min_trans_vel:  0.05 #0.11
  max_rot_vel: 1.0
  min_rot_vel: 0.1 #1.37
  acc_lim_x: 2.5
  acc_lim_y: 0.0
  acc_lim_theta: 3.2 
# Goal Tolerance Parametes
  xy_goal_tolerance: 0.05
  yaw_goal_tolerance: 0.17
  latch_xy_goal_tolerance: false
# Forward Simulation Parameters
  sim_time: 1.5
  vx_samples: 20
  vy_samples: 0
  vtheta_samples: 40
  controller_frequency: 10.0
# Trajectory Scoring Parameters
  path_distance_bias: 32.0
  goal_distance_bias: 20.0
  occdist_scale: 0.02
  forward_point_distance: 0.325
  stop_time_buffer: 0.2
  scaling_speed: 0.25
  max_scaling_factor: 0.2
# Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05
# Debugging
  publish_traj_pc : true
  publish_cost_grid_pc: true
    </rosparam>
    <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
    <remap from="odom" to="$(arg odom_topic)"/>
  </node>

  <!-- frontier_exploration-->
  <node pkg="frontier_exploration" type="explore_client" name="explore_client" output="screen"/>
  <node pkg="frontier_exploration" type="explore_server" name="explore_server" output="screen" >
    <param name="frequency" type="double" value="1.0"/>
    <param name="goal_aliasing" type="double" value="$(arg sensor_range)"/>
     <rosparam ns="explore_costmap" subst_value="true">
obstacle_range: 3.0
raytrace_range: 3.5
footprint: [[-0.105, -0.105], [-0.105, 0.105], [0.041, 0.105], [0.041, -0.105]]
#robot_radius: 0.105
inflation_radius: 1.0
cost_scaling_factor: 3.0
map_type: costmap
observation_sources: scan
scan: {sensor_frame: $(arg param_prefix)base_scan, data_type: LaserScan, topic: rsscan, marking: true, clearing: true}
     </rosparam>

    <!--formerly rsld_exploration.yaml-->
    <rosparam ns="explore_costmap" subst_value="true">
transform_tolerance: 0.5
update_frequency: 5.0  #was using 1 before, need to tune this to prevent bad things
publish_frequency: 5.0 #was using 1 before, tune to prevent bad things
global_frame: $(arg param_prefix)map
robot_base_frame: $(arg param_prefix)base_link
resolution: $(arg resolution)
rolling_window: false
track_unknown_space: true
plugins:
  - {name: static,           type: "costmap_2d::StaticLayer"}
  - {name: explore_boundary, type: "frontier_exploration::BoundedExploreLayer"}
  - {name: sensor,           type: "costmap_2d::ObstacleLayer"}
static:
 map_topic: map
 subscribe_to_updates: false
 first_map_only: true
explore_boundary:
  resize_to_boundary: false
  frontier_travel_point: closest
  explore_clear_space: true
sensor:
  observation_sources: scan
  scan: {data_type: LaserScan, clearing: true, marking: true, topic: rsscan, inf_is_valid: true, raytrace_range: 3.0, obstacle_range: 3.0}
    </rosparam>
  </node>
</launch>
